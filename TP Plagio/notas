https://stackoverflow.com/questions/8897593/how-to-compute-the-similarity-between-two-text-documents
https://spotintelligence.com/2022/12/19/text-similarity-python/#1_Text_similarity_with_NLTK


output:
nombre del archivo
nombre y apellido del alumno (identificar autores) https://unbiased-coder.com/extract-names-python-nltk/
tópico: identificar el título
porcentaje de plagio
listado de frases (guardarlas en una lista que guarde cada vez que identifique distancia 0 o cercana)
    consultar cuánto de esto hay que hacer

hacer documento con decisiones de diseño (por qué distancia jaccardiana)

módulos:
- uso de nltk para detectar distancia y frases similares (devuelve un número, o una lista simplemente, y de ahí calculo yo un número)
    - separar en frases, estas en tokens y hacer distancia
    - identificar nombres
    - identificar título
- leer documento y devolver un string
- juntar todo

opcional:
- scrapping. Guardar en una base de datos, extender el dataset

1. cuándo entrego los labs? antes del cierre de notas nomás o solo aceptás cierta fecha?
    antes del cierre de notas (29 de febrero creo)

2. notebooks o python?
    cualquiera    

3. un solo repo está?
    sí

4. puedo entregar el 27 para el 8 y el 11 para el 10?
    sí

5. detectar autores: detectar nombres, pero sería correcto para evitar agarrar nombres de algún autor mencionado del texto utilizar las primeras n palabras? y estaría bien hardcodear los profesores? si se repite el nombre por el encabezado presto atención
    hardcodear profes: sí y no. Hacer un EDA (Exploratory Data Analysis https://towardsdatascience.com/exploratory-data-analysis-8fc1cb20fd15) ver qué se repite en las primeras páginas de 30 tps. NER: Name Entity Recognition, hay librerías de eso. SpaCy, NLTK, etc, en Skillner. Que detecte nombres o apellidos, y ver qué hay después de eso, y que sea en la primer página. Filtrás por ese nombre y apellido si se repite mucho. En el entrenamiento, o antes en el EDA, detectamos los profesores y los empezamos a ignorar.
    Hacer lo de si se repite muchas veces porque también sirve para evitar repeticiones en los títulos si hay un nombre o algo,
    

6. identificar título: primera oración, o considero oración que se repite demasiado en el dataset (+3 veces?)
    ver palabras consecutivas, que esté en la primer página. Es una trampa de ingeniería
    lda scikit learn para encontrar tópicos https://es.wikipedia.org/wiki/Latent_Dirichlet_Allocation
    YAKE http://yake.inesctec.pt/
    https://skillner.vercel.app/
    tampoco es para tanto no poder pero igual está bueno que intentemos y que lo pensemos

7. el grado de plagio me lo puedo inventar con algún cálculo propio o debe ser alguna suma de las distancias?
    distancia jaccard está bien, 

8. Fechas del tp:
    viernes 27/10 o 11/11
    pantalla compartida cámara prendida, ejecutar el código y que funcione, y contar en 5-10 minutos cómo lo hicimos
    el documento es más para formalizarlo



base de datos elastic search
hace un año sacó la posibilidad de guardar texto y en la query podés
decirle encontrame texto similar a esto
semantic similarity ^

parte de training:
    tomar cada texto, procesar (sacar preposiciones, verbos, etc), y guardarlo en una base de datos o en memoria (objeto de python?). Después le pasás un nuevo documento y fijarte cuál es parecido

Para el 10: scrapping contra un buscador (cualquiera) por medio de una api o un browser. Hacés una búsqueda, agarrás los primeros links


títulos:
https://stackoverflow.com/questions/69821455/find-similar-expressions-without-knowing-them-in-multiple-texts-with-python3


hardcodeo los profesores de la materia, por el alto coste de procesamiento de sacar los nombres. Por lo tanto solo se sacan los nombres del texto a analizar

no utilicé otras formas de hallar nombres porque estas fallaban cuando el nombre no estaba en mayúscula. Entonces no le podía hacer un buen procesamiento


De ahí saco las frases más utilizadas y que se encuentren entre las primeras 20 palabras


pendiente:
    pasar por parámetro las constantes como los profesores
    get_titulos

título: los primero que aparece después de:
    nombres
    UTN (o Universidad Tecnológica Nacional)
    FRBA ( o Facultad Regional Buenos Aires)
    Ingeniería en Sistemas de Información

falla con los títulos en inglés. Posible solución: usar palabras en inglés, pero eso cargaría un montón el procesamiento

hacer que el get_nombres reciba los nombres de los profesores y los separe, así la coma entre ellos no supone problema. No se puede separar nombres por coma porque hay alumnos que ponen apellido, nombre. Poner en constante profesores sus nombres en formato apellido nombre

conclusión: la importancia de exigir un único formato
    
